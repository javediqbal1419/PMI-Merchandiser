///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace TradeTrackerProject.TestCases.Non_TK_ShopOpen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The TPOSMApplication recording.
    /// </summary>
    [TestModule("80fe4a49-c66b-464c-8a9a-34e11308a533", ModuleType.Recording, 1)]
    public partial class TPOSMApplication : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TradeTrackerProject.TradeTrackerProjectRepository repository.
        /// </summary>
        public static TradeTrackerProject.TradeTrackerProjectRepository repo = TradeTrackerProject.TradeTrackerProjectRepository.Instance;

        static TPOSMApplication instance = new TPOSMApplication();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public TPOSMApplication()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static TPOSMApplication Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_TPOSMApplication' at Center", repo.PkComTradetracker.ShopOpen_TPOSMApplicationInfo, new RecordItemIndex(0));
            repo.PkComTradetracker.ShopOpen_TPOSMApplication.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=480,Height=74}) on item 'PkComTradetracker.ShopOpen_TPOSMApplication_validation'.", repo.PkComTradetracker.ShopOpen_TPOSMApplication_validationInfo, new RecordItemIndex(1));
            Validate.ContainsImage(repo.PkComTradetracker.ShopOpen_TPOSMApplication_validationInfo, ShopOpen_TPOSMApplication_validation_Screenshot1, ShopOpen_TPOSMApplication_validation_Screenshot1_Options);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_TPOSMDeployment' at Center", repo.PkComTradetracker.ShopOpen_TPOSMDeploymentInfo, new RecordItemIndex(2));
            repo.PkComTradetracker.ShopOpen_TPOSMDeployment.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=480,Height=74}) on item 'PkComTradetracker.ShopOpen_TPOSM_validation'.", repo.PkComTradetracker.ShopOpen_TPOSM_validationInfo, new RecordItemIndex(3));
            Validate.ContainsImage(repo.PkComTradetracker.ShopOpen_TPOSM_validationInfo, ShopOpen_TPOSM_validation_Screenshot1, ShopOpen_TPOSM_validation_Screenshot1_Options);
            Delay.Milliseconds(0);
            
            ConstantUserCode.UserCodeCollection.visitAllTPOSM();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(5));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_TakePictureButton1' at Center", repo.PkComTradetracker.ShopOpen_TakePictureButton1Info, new RecordItemIndex(6));
            repo.PkComTradetracker.ShopOpen_TakePictureButton1.Touch();
            Delay.Milliseconds(500);
            
            ConstantUserCode.UserCodeCollection.TakePhoto();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.TPOSM_ButtonDone' at Center", repo.PkComTradetracker.TPOSM_ButtonDoneInfo, new RecordItemIndex(8));
            repo.PkComTradetracker.TPOSM_ButtonDone.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_TakePictureButton2' at Center", repo.PkComTradetracker.ShopOpen_TakePictureButton2Info, new RecordItemIndex(9));
            repo.PkComTradetracker.ShopOpen_TakePictureButton2.Touch();
            Delay.Milliseconds(500);
            
            ConstantUserCode.UserCodeCollection.TakePhoto();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.TPOSM_ButtonDone' at Center", repo.PkComTradetracker.TPOSM_ButtonDoneInfo, new RecordItemIndex(11));
            repo.PkComTradetracker.TPOSM_ButtonDone.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(12));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            ConstantUserCode.UserCodeCollection.loadNonTKAvailabilityCheck();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
        CompressedImage ShopOpen_TPOSMApplication_validation_Screenshot1
        { get { return repo.PkComTradetracker.ShopOpen_TPOSMApplication_validationInfo.GetScreenshot1(new Rectangle(0, 0, 480, 74)); } }

        Imaging.FindOptions ShopOpen_TPOSMApplication_validation_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ShopOpen_TPOSM_validation_Screenshot1
        { get { return repo.PkComTradetracker.ShopOpen_TPOSM_validationInfo.GetScreenshot1(new Rectangle(0, 0, 480, 74)); } }

        Imaging.FindOptions ShopOpen_TPOSM_validation_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
