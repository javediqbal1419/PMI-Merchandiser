///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace TradeTrackerProject.TestCases.TK_ShopOpen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ComplianceCheck recording.
    /// </summary>
    [TestModule("80930200-7cac-4efb-a7d1-bcc2a5bd4f99", ModuleType.Recording, 1)]
    public partial class ComplianceCheck : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TradeTrackerProject.TradeTrackerProjectRepository repository.
        /// </summary>
        public static TradeTrackerProject.TradeTrackerProjectRepository repo = TradeTrackerProject.TradeTrackerProjectRepository.Instance;

        static ComplianceCheck instance = new ComplianceCheck();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ComplianceCheck()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ComplianceCheck Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_ComplianceCheck' at Center", repo.PkComTradetracker.ShopOpen_ComplianceCheckInfo, new RecordItemIndex(0));
            repo.PkComTradetracker.ShopOpen_ComplianceCheck.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=480,Height=74}) on item 'PkComTradetracker.ShopOpen_ComplianceCheck_validation'.", repo.PkComTradetracker.ShopOpen_ComplianceCheck_validationInfo, new RecordItemIndex(1));
            Validate.ContainsImage(repo.PkComTradetracker.ShopOpen_ComplianceCheck_validationInfo, ShopOpen_ComplianceCheck_validation_Screenshot1, ShopOpen_ComplianceCheck_validation_Screenshot1_Options);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(2));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_ValidateOKButton' at Center", repo.PkComTradetracker.ShopOpen_ValidateOKButtonInfo, new RecordItemIndex(3));
            repo.PkComTradetracker.ShopOpen_ValidateOKButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_BookAvailable_No' at Center", repo.PkComTradetracker.Content1.ShopOpen_BookAvailable_NoInfo, new RecordItemIndex(4));
            repo.PkComTradetracker.Content1.ShopOpen_BookAvailable_No.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_BookAvailable_Yes' at Center", repo.PkComTradetracker.Content1.ShopOpen_BookAvailable_YesInfo, new RecordItemIndex(5));
            repo.PkComTradetracker.Content1.ShopOpen_BookAvailable_Yes.Touch();
            Delay.Milliseconds(500);
            
            ConstantUserCode.UserCodeCollection.TakePhoto();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.TPOSM_ButtonDone' at Center", repo.PkComTradetracker.TPOSM_ButtonDoneInfo, new RecordItemIndex(7));
            repo.PkComTradetracker.TPOSM_ButtonDone.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(8));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_ValidateOKButton' at Center", repo.PkComTradetracker.ShopOpen_ValidateOKButtonInfo, new RecordItemIndex(9));
            repo.PkComTradetracker.ShopOpen_ValidateOKButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_BWUExclusive_Yes' at Center", repo.PkComTradetracker.Content1.ShopOpen_BWUExclusive_YesInfo, new RecordItemIndex(10));
            repo.PkComTradetracker.Content1.ShopOpen_BWUExclusive_Yes.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_BWUExlusive_No' at Center", repo.PkComTradetracker.Content1.ShopOpen_BWUExlusive_NoInfo, new RecordItemIndex(11));
            repo.PkComTradetracker.Content1.ShopOpen_BWUExlusive_No.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_PackFacing75_Yes' at Center", repo.PkComTradetracker.Content1.ShopOpen_PackFacing75_YesInfo, new RecordItemIndex(12));
            repo.PkComTradetracker.Content1.ShopOpen_PackFacing75_Yes.Touch();
            Delay.Milliseconds(500);
            
            ConstantUserCode.UserCodeCollection.TakePhoto();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.TPOSM_ButtonDone' at Center", repo.PkComTradetracker.TPOSM_ButtonDoneInfo, new RecordItemIndex(14));
            repo.PkComTradetracker.TPOSM_ButtonDone.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_PackFacing75_No' at Center", repo.PkComTradetracker.Content1.ShopOpen_PackFacing75_NoInfo, new RecordItemIndex(15));
            repo.PkComTradetracker.Content1.ShopOpen_PackFacing75_No.Touch();
            Delay.Milliseconds(500);
            
            ConstantUserCode.UserCodeCollection.TakePhoto();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.TPOSM_ButtonDone' at Center", repo.PkComTradetracker.TPOSM_ButtonDoneInfo, new RecordItemIndex(17));
            repo.PkComTradetracker.TPOSM_ButtonDone.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=480,Height=74}) on item 'PkComTradetracker.ShopOpen_ShelfDisplay_validation'.", repo.PkComTradetracker.ShopOpen_ShelfDisplay_validationInfo, new RecordItemIndex(18));
            Validate.ContainsImage(repo.PkComTradetracker.ShopOpen_ShelfDisplay_validationInfo, ShopOpen_ShelfDisplay_validation_Screenshot1, ShopOpen_ShelfDisplay_validation_Screenshot1_Options);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(19));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_ValidateOKButton' at Center", repo.PkComTradetracker.ShopOpen_ValidateOKButtonInfo, new RecordItemIndex(20));
            repo.PkComTradetracker.ShopOpen_ValidateOKButton.Touch();
            Delay.Milliseconds(500);
            
            ConstantUserCode.UserCodeCollection.visitShelfDisplayRemarks();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(22));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_TPOSMitems_Yes' at Center", repo.PkComTradetracker.Content1.ShopOpen_TPOSMitems_YesInfo, new RecordItemIndex(23));
            repo.PkComTradetracker.Content1.ShopOpen_TPOSMitems_Yes.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_TPOSMitems_No' at Center", repo.PkComTradetracker.Content1.ShopOpen_TPOSMitems_NoInfo, new RecordItemIndex(24));
            repo.PkComTradetracker.Content1.ShopOpen_TPOSMitems_No.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.Content1.ShopOpen_ComplianceCheckStatusButton' at Center", repo.PkComTradetracker.Content1.ShopOpen_ComplianceCheckStatusButtonInfo, new RecordItemIndex(25));
            repo.PkComTradetracker.Content1.ShopOpen_ComplianceCheckStatusButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=480,Height=74}) on item 'PkComTradetracker.ShopOpen_ComplianceCheckvalidation'.", repo.PkComTradetracker.ShopOpen_ComplianceCheckvalidationInfo, new RecordItemIndex(26));
            Validate.ContainsImage(repo.PkComTradetracker.ShopOpen_ComplianceCheckvalidationInfo, ShopOpen_ComplianceCheckvalidation_Screenshot1, ShopOpen_ComplianceCheckvalidation_Screenshot1_Options);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(27));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(28));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ShopOpen_ViewCycle' at Center", repo.PkComTradetracker.ShopOpen_ViewCycleInfo, new RecordItemIndex(29));
            repo.PkComTradetracker.ShopOpen_ViewCycle.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(30));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'PkComTradetracker'.", repo.PkComTradetracker.SelfInfo, new RecordItemIndex(31));
            repo.PkComTradetracker.Self.PressKeys("{BACK}");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PkComTradetracker.ChangeOptionYesButton' at Center", repo.PkComTradetracker.ChangeOptionYesButtonInfo, new RecordItemIndex(32));
            repo.PkComTradetracker.ChangeOptionYesButton.Touch();
            Delay.Milliseconds(500);
            
        }

#region Image Feature Data
        CompressedImage ShopOpen_ComplianceCheck_validation_Screenshot1
        { get { return repo.PkComTradetracker.ShopOpen_ComplianceCheck_validationInfo.GetScreenshot1(new Rectangle(0, 0, 480, 74)); } }

        Imaging.FindOptions ShopOpen_ComplianceCheck_validation_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ShopOpen_ShelfDisplay_validation_Screenshot1
        { get { return repo.PkComTradetracker.ShopOpen_ShelfDisplay_validationInfo.GetScreenshot1(new Rectangle(0, 0, 480, 74)); } }

        Imaging.FindOptions ShopOpen_ShelfDisplay_validation_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ShopOpen_ComplianceCheckvalidation_Screenshot1
        { get { return repo.PkComTradetracker.ShopOpen_ComplianceCheckvalidationInfo.GetScreenshot1(new Rectangle(0, 0, 480, 74)); } }

        Imaging.FindOptions ShopOpen_ComplianceCheckvalidation_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
